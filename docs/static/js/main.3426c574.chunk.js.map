{"version":3,"sources":["helpers/helper.js","components/ControlPresupuesto.js","components/Error.js","components/Formulario.js","components/Gasto.js","components/Listado.js","components/Pregunta.js","App.js","serviceWorker.js","index.js"],"names":["revisarPresupuesto","presupuesto","restante","ControlPresupuesto","className","Error","msg","Formulario","setGasto","setCreargasto","useState","nombre","setNombre","cantidad","setCantidad","error","setError","onSubmit","e","preventDefault","trim","isNaN","gasto","id","shortid","generate","type","placeholder","value","onChange","target","parseInt","Gasto","Listado","gastos","map","key","Pregunta","setPresupuesto","setRestante","setMostrarpregunta","name","inputValue","App","mostrarpregunta","setGastos","creargasto","useEffect","presupuestoRestante","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3426c574.chunk.js","sourcesContent":["\r\n\r\nexport const revisarPresupuesto = (presupuesto, restante)=>{\r\n    let clase;\r\n\r\n    if(restante <= (presupuesto / 4)  ){\r\n        clase = 'alert alert-danger';\r\n    }else if (restante <= (presupuesto / 2) ){\r\n        clase = 'alert alert-warning';\r\n    }else{\r\n        clase = 'alert alert-success';\r\n    }\r\n    return clase;\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {revisarPresupuesto} from '../helpers/helper'\r\n\r\n\r\nconst ControlPresupuesto = ({presupuesto,restante}) => {\r\n    return (\r\n        <>\r\n            <div className=\"alert alert-primary\">\r\n                Presupuesto: {presupuesto}\r\n            </div>\r\n            <div className= { revisarPresupuesto(presupuesto,restante) }>\r\n                Restante: {restante}\r\n            </div>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nControlPresupuesto.propTypes = {\r\n    presupuesto: PropTypes.number.isRequired,\r\n    restante:PropTypes.number.isRequired\r\n}\r\n\r\nexport default ControlPresupuesto\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Error = ({msg}) => (\r\n    <p className=\"alert alert-danger error\">{ msg }</p>\r\n);\r\n\r\nError.propTypes = {\r\n    msg: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Error\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Error from './Error';\r\nimport shortid from 'shortid';\r\n\r\n\r\n\r\nconst Formulario = ({setGasto, setCreargasto}) => {\r\n    const [nombre, setNombre] = useState('');\r\n    const [cantidad, setCantidad] = useState(0);\r\n    const [error, setError] = useState(false)\r\n\r\n    // Cuando el usuario agrerga el gasto con el submit\r\n    const handleSubmit =(e)=>{\r\n        e.preventDefault();\r\n        \r\n        // Validar\r\n        if(nombre.trim() === ''|| cantidad < 0 || isNaN(cantidad)){\r\n            setError(true);\r\n            return;\r\n        }\r\n        setError(false);\r\n\r\n        // Construir el Gasto\r\n        const gasto ={\r\n            nombre,\r\n            cantidad,\r\n            id: shortid.generate()\r\n            \r\n        }\r\n        \r\n        \r\n        // Pasar el gasto al componente principal\r\n        setGasto(gasto)\r\n        setCreargasto(true)\r\n\r\n        // Resetear el form\r\n        setNombre('')\r\n        setCantidad(0)\r\n    }\r\n\r\n    return (\r\n        <form\r\n            onSubmit={ handleSubmit }\r\n        >\r\n            <h2>Agrega tus Gastos aquí</h2>\r\n            \r\n            {error && <Error msg=\"Error al introducir los datos\"/>}\r\n            \r\n            <div className=\"campo\">\r\n                <label>Nombre Gasto</label>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Ej. Transporte\"\r\n                    value={nombre }\r\n                    onChange={ (e)=>setNombre(e.target.value) }\r\n                />\r\n            </div>\r\n            <div className=\"campo\">\r\n                <label>Cantidad Gasto</label>\r\n                <input\r\n                    type=\"number\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Ej. 300\"\r\n                    value={cantidad }\r\n                    onChange={ (e)=>setCantidad (parseInt(e.target.value)) }\r\n                />\r\n            </div>\r\n\r\n            <input\r\n                type=\"submit\"\r\n                className=\"button-primary u-full-width\"\r\n                value=\"Agregar Gastos\"\r\n            />\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nFormulario.propTypes = {\r\n    setGasto: PropTypes.func.isRequired,\r\n    setCreargasto: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Gasto = ({gasto}) => {\r\n    const {nombre,cantidad}= gasto\r\n\r\n    return (\r\n\r\n        <li className=\"gastos\">\r\n            <p>\r\n                {nombre}\r\n\r\n                <span className=\"gasto\">$ {cantidad} </span>\r\n            </p>\r\n        </li>\r\n    )\r\n\r\n\r\n}\r\n\r\n\r\n\r\nGasto.propTypes = {\r\n    gasto: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Gasto\r\n","import React from 'react'\r\nimport Gasto from './Gasto';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Listado = ({gastos}) => (\r\n    <div className=\"gastos-realizados\">\r\n        <h2>Listado</h2>\r\n\r\n        {gastos.map(gasto=>(\r\n            <Gasto \r\n                key= {gasto.id}\r\n                gasto={gasto}\r\n            />\r\n        ))}\r\n    </div>\r\n);\r\n \r\n\r\nListado.propTypes = {\r\n    gastos: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Listado\r\n","import React, { useState } from 'react'\r\nimport Error from './Error';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nconst Pregunta = ({setPresupuesto, setRestante, setMostrarpregunta}) => {\r\n\r\n    // Definir State\r\n    const [cantidad, setCantidad] = useState(0);\r\n    const [error, setError] = useState(false)\r\n\r\n    // Función Leer presupuesto\r\n    const handleChange = ({target})=>{\r\n        const inputValue = parseInt(target.value, 10);\r\n        setCantidad(inputValue)\r\n    }\r\n\r\n    //Manejar submit agregar Presupuesto\r\n    const handleSubmit= (e)=>{\r\n        e.preventDefault();\r\n        \r\n        //Validar\r\n        if(isNaN(cantidad) || cantidad < 1 ){\r\n            setError(true)\r\n            return;\r\n        }\r\n\r\n        // si pasa validacion\r\n        setError(false)\r\n        // Agregar Presupuesto\r\n        setPresupuesto(cantidad)\r\n        setRestante(cantidad)\r\n        setMostrarpregunta(false)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>Coloca tu Presupuesto</h2>\r\n            {error && <Error msg=\"El Presupuesto es Incorrecto\"/>}\r\n\r\n            <form\r\n                onSubmit={ handleSubmit }\r\n            >\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"presupuesto\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Coloca tu presupuesto\"\r\n                    onChange={ handleChange }\r\n                />\r\n                <input\r\n                    type=\"submit\"\r\n                    className=\"button-primary u-full-width\"\r\n                    value=\"Definir Presupuesto\"\r\n                />\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nPregunta.propTypes = {\r\n    setPresupuesto: PropTypes.func.isRequired,\r\n    setRestante: PropTypes.func.isRequired,\r\n    setMostrarpregunta: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Pregunta\r\n","import React, { useEffect, useState } from 'react';\nimport ControlPresupuesto from './components/ControlPresupuesto';\nimport Formulario from './components/Formulario';\nimport Listado from './components/Listado';\nimport Pregunta from './components/Pregunta';\n\n\n\nfunction App() {\n  \n  //definir state de presupuesto global\n  const [presupuesto, setPresupuesto] = useState(0);\n  \n  //definir state de restante del presupuesto global\n  const [restante, setRestante] = useState(0)\n\n  // mostrar componentes condicionales\n  const [mostrarpregunta, setMostrarpregunta] = useState(true)\n\n  // Definir States del Areeglo de Gastos\n  const [gastos, setGastos] = useState([])\n\n  //Cuando agreguemos un nuevo gasto \n  const [gasto, setGasto] = useState({})\n  const [creargasto, setCreargasto] = useState(false)\n\n\n  \n\n  // useEffect actualiza el presupuesto restante cada vez que gastos cambia\n  useEffect(() => {\n\n    if(creargasto){\n\n      // agrega el nuevo prsupuesto\n      setGastos([\n      \n        ...gastos,\n        gasto\n      ]); \n\n      // resta del presupuesto actual\n      const presupuestoRestante = restante - gasto.cantidad;\n      setRestante(presupuestoRestante)\n\n      //Resetear a false\n      setCreargasto(false)\n      \n    }\n\n    \n\n  },[gasto,creargasto,gastos,restante])\n\n \n\n  return (\n    <div className=\"container\">\n      <header>\n        <h1>Presupuesto Semanal</h1>\n\n        <div className=\"contenido-principal contenuido\">\n          {\n\n            mostrarpregunta\n              ?\n                (<Pregunta \n                  setPresupuesto={setPresupuesto}\n                  setRestante={setRestante}\n                  setMostrarpregunta={setMostrarpregunta}\n                />)\n              :\n                (<div className=\"row\">\n                  <div className=\"one-half column\">\n                    <Formulario \n                      setGasto = {setGasto}\n                      setCreargasto = {setCreargasto}\n                    />\n                  </div>\n                  <div className=\"one-half column\">\n                    <Listado \n                      gastos={gastos}\n\n                    />\n                    <ControlPresupuesto \n                      presupuesto={presupuesto}\n                      restante={restante}\n                    />\n                  </div>\n                </div>)\n          }\n          \n\n        </div>\n      </header>\n\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}